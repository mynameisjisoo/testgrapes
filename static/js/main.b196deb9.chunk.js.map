{"version":3,"sources":["Table/Material.js","Table/actions.js","Table/components.jsx","Table/consts.js","Table/blocks.js","Table/commands.js","Table/panels.js","Table/ParserHtmlCaseSensitive.js","Chart/consts.js","Chart/Chart.js","Chart/actions.js","Chart/components.jsx","Chart/blocks.js","Chart/commands.js","Chart/panels.js","Chart/ParserHtmlCaseSensitive.js","testcomponent.js","App.js","Table/index.js","Chart/index.js","serviceWorker.js","index.js"],"names":["Material","console","log","this","props","data","f","i","j","length","kee","Object","keys","cellspacing","cellpadding","style","margin","display","flexDirection","textAlign","tableLayout","whiteSpace","borderRadius","overflow","boxShadow","fontSize","color","justifyContent","backgroundColor","map","k","width","padding","class","d","values","forEach","key","push","alignItems","di","wordWrap","React","Component","axios","defaults","headers","Authorization","APP_URL","addWidget","widgetData","a","dashboardId","post","editor","updateTrait","domc","DomComponents","defaultType","getType","defaultModel","model","defaultView","view","displayOptions","displayDevice","newObj","addType","extend","prototype","droppable","defaultData","prevData","dbId","traits","name","type","text","full","command","get","then","res","component","getSelected","addTrait","changeProp","options","op","id","title","removeTrait","toHTML","init","listenTo","handlePropChange","attributes","getTrait","set","dataSourceId","config","docId","fields","toString","replace","primaryKey","at","dataSource","Table","collections","handleChanges","undefined","response","t","each","trait","label","selected","postData","postDataArray","models","element","value","arr","js","customId","reso","ReactDOM","unmountComponentAtNode","el","render","onRender","reset","opt","c","bm","BlockManager","remove","add","category","blockLabel","content","cm","Commands","e","html","getModel","parserHtml","unquoteJsxExpresionsInAttributes","getHtml","setHtmlString","setCssString","getCss","run","sender","store","pn","Panels","getPanels","addButton","className","window","nodeHtmlParser","compTypes","modelAttrStart","splitPropsFromAttr","attr","attrs","indexOf","modelAttr","valueLen","valStr","isString","firstChar","substr","lastChar","JSON","parse","quoteJsxExpresionsInAttributes","found","XRegExp","matchRecursive","pattern","lastStartPos","needsQuote","matchPos","oneCharBeforePos","twoCharBeforePos","substring","replacement","match","startsWith","parseStyle","str","result","decls","split","len","decl","trim","prop","slice","join","parseClass","cls","cl","toAttrArray","obj","attrArr","parseNode","nodes","childNodes","node","nodeValue","rawText","attrsLen","nodePrev","nodeChild","ct","getAttribute","it","compType","isComponent","tagName","nodeName","classes","components","firstChild","nodeType","keepEmptyTextNodes","comps","allTxt","foundTextNode","ci","comp","cType","textTags","parserCss","em","css","quoted","wrappedInDiv","dom","document","createElement","innerHTML","styleStr","styles","querySelectorAll","parentNode","removeChild","Chart","theme","VictoryTheme","material","interpolation","stroke","parent","border","x","y","labels","datum","animate","duration","onLoad","TestComponent","App","useState","pluginLoaded","setPluginLoaded","useEffect","grapesjs","height","container","fromElement","plugins","gsWebpage","gsCustome","gsTap","storageManager","urlStore","urlLoad","autosave","autoload","contentTypeJson","storeComponents","allowScripts","storeStyles","storeHtml","storeCss","opts","TraitManager","noLabel","getInputEl","blocks","blockCategory","defaultStyle","loadComponents","loadBlocks","loadCommands","loadPanels","emConf","parserHtmlCaseSensitive","parseHtml","pHtml","getTypes","on","openBl","getButton","Boolean","location","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b196deb9.chunk.js","sourcesContent":["import React from \"react\";\nclass Material extends React.Component {\n    \n    render() {\n        console.log(this.props.data)\n        // const keys = [...new Set([].concat.apply([], this.props.data.map(obj => Object.keys(obj))))]\n        // console.log(keys)\n        let f = ''\n        for (let i = 0, j = 0; i < this.props.data.length && j < 10; i++, j++) {\n\n            const kee = Object.keys(this.props.data[i])\n            console.log(kee)\n            f = kee\n        }\n        return (\n                <table\n                    cellspacing=\"0\"\n                    cellpadding=\"0\"\n                    style={{\n                        margin: \"20px\",\n                        display: \"flex\",\n                    flexDirection: \"column\",\n                    textAlign: \"center\",\n                    tableLayout: 'fixed',\n                        whiteSpace: 'normal',\n                        borderRadius: '15px',\n                        overflow: 'hidden',\n                        boxShadow: '0 0px 40px 0px rgba(0, 0, 0, 0.15)',\n                        fontSize: '15px',\n                        color: '#808080',\n                    \n                }}>\n                    <thead>\n                        <tr\n                            style={{\n\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                justifyContent: \"space-between\",\n                                backgroundColor: '#6c7ae0',\n                            boxShadow: '0px 0px 9px 0px rgba(0,0,0,0.1)',\n                            color: 'white'\n\n\n\n                        }}\n                        >\n                            {f.map((k) => {\n                                console.log(f.length)\n                                \n                                return (\n                                    <th\n                                        style={{\n                                            width:`${100/f.length}%`,\n                                            padding: \"15px\",\n                                        }}>{k}</th>\n                                )\n                            })}\n                        </tr>\n                    </thead>\n                    <tbody class=\"Tbody\">\n                        {\n                            this.props.data.map((d) => {\n                                const values = []\n                                f.forEach(key => {\n                                    \n                                    if (typeof d[key] === 'object' || typeof d[key] === 'undefined') {\n\n                                        d[key] = '----------'\n\n                                    } else if (d[key] === true) {\n                                        d[key] = \"true\"\n                                    } else if (d[key] === false) {\n                                        d[key] = 'false'\n                                    } else if (d[key].length < 1) {\n                                        d[key] = '----------'\n                                    } \n                                    \n                                    \n                                    values.push(d[key])\n\n                                })\n                                console.log(values)\n                                // values.map(str => {\n                                //     if (typeof str === \"object\") {\n                                //         let st = JSON.stringify(str)\n                                //         values[1] = st;\n                                //     } else if (typeof str === Boolean) {\n                                //         return str.toString()\n\n                                //     }\n                                //})\n                                return (\n                                    <tr\n                                        class=\"Tr-body\"\n                                        style={{\n                                        display: \"flex\",\n                                        flexDirection: \"row\",\n                                        justifyContent: \"space-around\",\n                                        alignItems: \"center\",\n                                        \n                                        }}>\n                                        \n                                        {values.map((di) => {\n                                            return (\n                                                \n                                                <td\n                                                    style={{\n                                                    width: `${100 / f.length}%`,\n                                                        wordWrap: 'break-word',\n                                                        padding: '10px 0',\n                                                        \n                                                }}\n                                            \n                                                >\n                                                    \n                                                    {di}\n                                                    </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            })\n                        }\n                        \n                \n                    </tbody>\n                </table>\n        );\n\n    }\n}\n\n\n\nexport default Material\n","import axios from 'axios'\n\naxios.defaults.headers = {\n  Authorization: 'aKbUDekFAKiWP0Rx4wGY3HdNU7wrbWJvhkrefgyW6pdiWuVCry8izvNHkpFhfG9B'\n}\n\nconst APP_URL = 'http://173.249.14.149:3001/api'\n//http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb?access_Token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n//http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb/widgetSettings?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n\nexport const addWidget = async (widgetData, dashboardId = '5ef370de14213070188a41eb') => {\n  return axios\n    .post(\n      `${APP_URL}/Dashboards/${dashboardId}/widgetSettings`,\n      widgetData\n    )\n}\nexport const updatedash = async (dashboardId, widgetData) => {\n  return axios\n    .put(\n      `${APP_URL}/Dashboards/${dashboardId}`,\n      {grapes: widgetData}\n    )\n}\n\n//http://173.249.14.149:3001/api/widgetsettings/5ef7454a14213070188a46f9?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n\nexport const updateWidget = async (widgetId, widgetData) => {\n  return axios\n    .put(\n      `${APP_URL}/WidgetSettings/${widgetId}`,\n      widgetData\n    )\n}\n\nexport const getWidgets = async (dashboardId = '5ef370de14213070188a41eb') => {\n  return axios\n    .get(\n      `${APP_URL}/Dashboards/${dashboardId}/widgetSettings`\n    )\n}\n\nexport const getWidgetData = async (widgetId) => {\n  return axios.get(\n    `${APP_URL}/WidgetSettings/${widgetId}/execute-query`,\n  )\n}\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport axios from 'axios'\n\n\nimport {TableRef} from './consts'\nimport Material from './Material'\nimport {\n\taddWidget,\n\tupdateWidget,\n\tgetWidgets,\n\tgetWidgetData\n} from './actions'\n\n\n\nexport default function (editor, opt = {}) {\n\tlet d = [[{ \"Name\": \"Henery\", \"Location\": \"Usa\", \"id\": \"5c24dc26dc10670017e40921\", \"last Seen\": \"2020-06-10T19:51:40.452Z\", \"notes\": \"\" }]]\n\n\tlet updateTrait = []\n\tconst domc = editor.DomComponents\n\tconst defaultType = domc.getType('default')\n\tconst defaultModel = defaultType.model\n\tconst defaultView = defaultType.view\n\n\n\n\tfunction displayOptions(displayDevice) {\n\t\tlet newObj = [];\n\n\t\tfor (var key in displayDevice) {\n\t\t\tif (displayDevice[key] === true)\n\t\t\t\tnewObj.push(key);\n\t\t}\n\n\t\treturn newObj;\n\t}\n\n\t\n\n\t\n\tdomc.addType(TableRef, {\n\t\n\t\tmodel: defaultModel.extend({\n\t\t\tdefaults: {\n\t\t\t\t...defaultModel.prototype.defaults,\n\t\t\t\tdroppable: true,\n\t\t\t\tdefaultData: [[{ \"Name\": \"Henery\", \"Location\": \"Usa\", \"id\": \"5c24dc26dc10670017e40921\", \"last Seen\": \"2020-06-10T19:51:40.452Z\", \"notes\": \"\" }]],\n\t\t\t\tprevData: [],\n\t\t\t\tdbId: [],\n\t\t\t\tkeys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n\t\t\t\ttraits:\n\t\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\tname:'modify',\n\t\t\t\ttype: 'button',\n\t\t\t\ttext: `Modify`,\n\t\t\t\tfull: true, \n\t\t\t\t\tcommand: editor => axios.get('http://173.249.14.149:3001/api/DataSources?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ')\n\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\tlet component = editor.getSelected()\n\t\t\t\t\t\t\tcomponent.addTrait({\n\t\t\t\t\t\t\t\tname: \"dataSource\",\n\t\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\t\tchangeProp: 1,\n\t\t\t\t\t\t\t\toptions: res.data.map(op => {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t{ id: op.id, name: op.title }\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tcomponent.removeTrait('modify')\n\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\ttoHTML: function () {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\n\t\t\t}, init() {\n\n\t\t\t\tthis.listenTo(this, this.handlePropChange);\n\t\t\t\tif (this.attributes.prevData.length >= 1) {\n\t\t\t\t\tthis.getTrait('modify').set('text', \"Edit\")\n\t\t\t\t\tthis.addTrait({\n\t\t\t\t\t\t \n\t\t\t\t\t\t\tname: 'Prev',\n\t\t\t\t\t\t\ttype: 'pre',\n\t\t\t\t\t\ttext: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].dataSourceId === '5ec035f7bb377b08ebc8938a' ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId}</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.docId}</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields.toString().replace(/,/g, ' | ')}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${this.attributes.prevData[0].config.primaryKey}</span><br/>\n\t\t\t\t\t`\n\t\t\t\t\t\n\t\t\t\t\t }, {at:0})\n\t\t\t\t}\n\t\t\t\tif (this.attributes.dataSource) {\n\t\t\t\t\tthis.attributes.dataSource = ''\n\t\t\t\t\tthis.attributes.Table = ''\n\t\t\t\t\tthis.attributes.collections = ''\n\t\t\t\t} else {\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\n\t\t}),\n\n\t\tview: defaultView.extend({\n\t\t\tinit() {\n\t\t\t\tthis.listenTo(this.model, `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`, this.handleChanges);\n\n\t\t\t},\n\t\t\thandleChanges() {\n\n\t\t\t\tif (this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\")) {\n\t\t\t\t\t\n\n\n\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/doc-list?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\n\t\t\t\t\t\t.then(response => {\n\n\t\t\t\t\t\t\tconst component = editor.getSelected();\n\t\t\t\t\t\t\tif (this.model.attributes.Table) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcomponent.addTrait\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\tname: \"Table\",\n\t\t\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\t\t\toptions:\n\t\t\t\t\t\t\t\t\t\tresponse.data.map((t) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t{ id: t, name: t }\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tchangeProp: 1,\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.attributes.Table) {\n\t\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/field-list?docId=${this.model.attributes.Table}&access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t.then(response => {\n\n\t\t\t\t\t\t\t\tconst component = editor.getSelected()\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\tif (updateTrait.length > 1) {\n\n\t\t\t\t\t\t\t\t\tthis.model.get('traits').each(function (trait) {\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(updateTrait.map(t => t.toString()));\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(\"collections\");\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(\"console\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresponse.data.map((t) => {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet res = [\n\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: t, name: t, type: \"checkbox\", changeProp:1\n\t\t\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\tupdateTrait.push(t)\n\t\t\t\t\t\t\t\t\tcomponent.addTrait(res)\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tcomponent.addTrait({\n\t\t\t\t\t\t\t\t\tlabel: \"Primary key\",\n\t\t\t\t\t\t\t\t\tname: \"collections\",\n\t\t\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\t\t\toptions: response.data.map(t => t),\n\t\t\t\t\t\t\t\t\tchangeProp: 1\n\n\t\t\t\t\t\t\t\t}, { at: 40 });\n\n\t\t\t\t\t\t\t\tcomponent.addTrait(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\t\t\t\tname: \"console\",\n\t\t\t\t\t\t\t\t\t\tchangeProp:1,\n\t\t\t\t\t\t\t\t\t\tlabel: \"log button\",\n\t\t\t\t\t\t\t\t\t\ttext: 'Click me',\n\t\t\t\t\t\t\t\t\t\tfull: true,\n\t\t\t\t\t\t\t\t\t\tcommand: editor => {\n\t\t\t\t\t\t\t\t\t\t\tconst selected = editor.getSelected();\n\t\t\t\t\t\t\t\t\t\t\tlet postData = {}\n\t\t\t\t\t\t\t\t\t\t\tlet postDataArray = []\n\t\t\t\t\t\t\t\t\t\t\tselected.attributes.traits.models.forEach(element => {\n\n\t\t\t\t\t\t\t\t\t\t\tpostData[element.attributes.name] = element.attributes.value\n\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\tpostDataArray.push(postData)\n\t\t\t\t\t\t\t\t\t\t\tlet arr = null\n\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.keys = []\n\t\t\t\t\t\t\t\t\t\t\tarr = postDataArray.map((js => {\n\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.keys.push(displayOptions(js))\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"dataSourceId\": js.dataSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"config\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"fields\": displayOptions(js),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"primaryKey\": js.collections,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"docId\": js.Table,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"simple\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"func\": \"find\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": {}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"Table\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}))[0]\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(this.model.attributes.keys)\n\t\t\t\t\t\t\t\t\t\t\t\taddWidget(arr)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(res.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet customId = res.data.id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.prevData = []\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.prevData.push(res.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.model.attributes.prevData.length >= 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait('Prev')\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/WidgetSettings/${customId}/execute-query?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.then(reso => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(reso.data)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.model.attributes.defaultData.length < 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData.push(reso.data)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData = []\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData.push(reso.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.then(() => {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReactDOM.unmountComponentAtNode(this.el);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.render();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t},\n\t\tonRender({ el }) {\n\t\t\t\t\t\t\t\t\n\t\t\t\tconst comps = this.model.get('components')\n\t\t\t\tcomps.reset()\n\t\t\t\tReactDOM.render(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Material keys={this.model.attributes.keys} data={this.model.attributes.defaultData[0]} />\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t, el)\n\t\t\t},\n\t\t}),\n\t})\n\t\t\n}\n\n","\nexport const TableRef = 'table';\nexport const nwTableRef = 'ttable'\nexport const TablePluginRef = 'Table-Plugin';\nexport const loadHtmltemplate = 'load-html-template';\n","\nimport {\n    TableRef\n} from './consts';\n\nexport default function (editor, opt = {}) {\n\n    const c = opt;\n  const bm = editor.BlockManager;   \nbm.remove(TableRef);\n    bm.add(TableRef, {\n      label: 'Tabel',\n      category: c.blockLabel,\n      attributes: { class: 'fa fa-table' },\n      content: `\n        <div class=\"T\" data-gjs-type=\"${TableRef}\"></div>\n        <style>\n        .T {\n              float: left;\n\n        }\n        .Tbody {\n          max-height: 585px;\n          overflow: auto;\n        }\n        .Tbody tr:nth-child(even) {\n        background-color: #f8f6ff;\n      }\n        </style>\n      `\n    });\n  \n}\n","/**\n * Adds loadHtmltemplate command\n */\nimport axios from 'axios'\nimport {\n  addWidget,\n  updateWidget,\n  getWidgets,\n  getWidgetData\n} from './actions'\nimport {loadHtmltemplate} from \"./consts\";\n\nexport default (editor, config) => {\n  const cm = editor.Commands;\n\n  cm.add(loadHtmltemplate, e => {\n      const pHtml = e.getModel().get('Parser').parserHtml;\n      // JSX expression in attributes are quoted, so unquote them before passing on\n      let html = pHtml.unquoteJsxExpresionsInAttributes(e.getHtml());\n      config.setHtmlString(html);\n      config.setCssString(e.getCss());\n  });\n  cm.add\n    ('save-db',\n      {\n        run: function (editor, sender) {\n          sender && sender.set('active');\n          editor.store();\n        }\n      });\n \n  \n}\n","\n\nexport default (editor, config) => {\n    const pn = editor.Panels;\n    console.log(pn.getPanels())\n\n    \n    pn.addButton('options', [{\n        id: 'save-db',\n        className: 'fa fa-floppy-o',\n        command: 'save-db',\n        attributes: { title: 'Save', style:\"color:#00C6CF; margin-left: 50px; \" }\n    }]);\n    \n}\n","import { each, isString } from 'underscore';\nimport { parse as nodeHtmlParser } from \"node-html-parser\";\nimport XRegExp from \"xregexp\";\n\nwindow.nodeHtmlParser = nodeHtmlParser;\n\n/**\n * Parses an HTML string into its HTML and CSS component representation keeping case of tags and attributes. This\n * is necessary in case you want React compatible JSX tags in the template, in which case the react components must start\n * wih uppercase and also the camel casing of attributes is importane (ie. className vs classname)\n *\n * This function is based on src/parser/model/ParserHtml.js. For parsing we are using node-html-parser instead of\n * the browser's DOM to keep the case of tags and attributes. The code is mostly the same  as in ParserHtml.js\n * by maing the objects created by  node-html-parser compatible with the DOM representation.\n *\n * @param config usual grapesjs config\n * @returns parser function\n */\nexport default config => {\n    var TEXT_NODE = 'span';\n    var c = config;\n    var modelAttrStart = 'data-gjs-';\n\n    return {\n        compTypes: '',\n\n        modelAttrStart,\n\n        /**\n         * Extract component props from an attribute object\n         * @param {Object} attr\n         * @returns {Object} An object containing props and attributes without them\n         */\n        splitPropsFromAttr(attr = {}) {\n            const props = {};\n            const attrs = {};\n\n            each(attr, (value, key) => {\n                if (key.indexOf(this.modelAttrStart) === 0) {\n                    const modelAttr = key.replace(modelAttrStart, '');\n                    const valueLen = value.length;\n                    const valStr = value && isString(value);\n                    const firstChar = valStr && value.substr(0, 1);\n                    const lastChar = valStr && value.substr(valueLen - 1);\n                    value = value === 'true' ? true : value;\n                    value = value === 'false' ? false : value;\n\n                    // Try to parse JSON where it's possible\n                    // I can get false positive here (eg. a selector '[data-attr]')\n                    // so put it under try/catch and let fail silently\n                    try {\n                        value =\n                            (firstChar == '{' && lastChar == '}') ||\n                            (firstChar == '[' && lastChar == ']')\n                                ? JSON.parse(value)\n                                : value;\n                    } catch (e) {}\n\n                    props[modelAttr] = value;\n                } else {\n                    attrs[key] = value;\n                }\n            });\n\n            return {\n                props,\n                attrs\n            };\n        },\n\n        /**\n         * Given a string with html (jsx). Attributes having JSX expressions will be quoted to look like\n         * actual HTML attributes\n         * @param {*} html\n         * @return html with quoted JSX attributes\n         *\n         * https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses\n         */\n        quoteJsxExpresionsInAttributes(html) {\n            let found = XRegExp.matchRecursive(html, \"{\", \"}\", \"g\");\n            for (let i = 0; i < found.length; i++) {\n                // (value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`\n                // --> {(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                let pattern = \"{\" + found[i] + \"}\";\n                let lastStartPos = 0;\n                // Find pattern until we reach and of html\n                while (true) {\n                    let needsQuote = false;\n                    // get next match position\n                    let matchPos = html.indexOf(pattern, lastStartPos);\n                    if (matchPos === -1) {\n                        break;\n                    }\n                    // We will look back 1 and 2 characters\n                    let oneCharBeforePos = matchPos - 1;\n                    let twoCharBeforePos = matchPos - 2;\n                    if (twoCharBeforePos > 0 && oneCharBeforePos > 0) {\n                        // Need to quote if have sg like this:\n                        //   formatValue={(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                        // (ie: if patterns comes atfre and equals sime, but not =\")\n                        // But no need to quote if:\n                        //    formatValue=\"{(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\"\n                        //    <Timer.Days/>{this.model.attributes.displayLabels ? \" \"+this.model.attributes.labels.labelDays+\" \" : ', '}\n                        needsQuote =\n                            html.substring(twoCharBeforePos, twoCharBeforePos + 2) !== '=\"' &&\n                            html.substring(oneCharBeforePos, oneCharBeforePos + 1) === \"=\";\n                    }\n\n                    // If need to quote: replace patterns with quoted version also escaping some HTML entities\n                    if (needsQuote) {\n                        let replacement =\n                            '\"{' +\n                            found[i]\n                                .replace(\"<\", \"&lt;\")\n                                .replace(\">\", \"&gt;\")\n                                .replace(\"&\", \"&amp;\")\n                            + '}\"';\n                        html = html.replace(pattern, replacement);\n                        lastStartPos = matchPos + replacement.length;\n                    } else {\n                        lastStartPos = matchPos + pattern.length;\n                    }\n\n                    // No lastStartPos placed after the processed string\n                }\n            }\n            return html;\n        },\n\n\n\n        /**\n         * Unquote attributes containg JSX previously quoted using quoteJsxExpresionsInAttributes\n         * @param html\n         */\n        unquoteJsxExpresionsInAttributes(html) {\n            let found = html.match(/=[\"']{.*}[\"']/g);\n            if (!found) {\n                return html;\n            }\n            for (let i = 0; i < found.length; i++) {\n                let pattern = found[i];\n                let replacement = pattern.startsWith('=\"{')\n                    ? pattern.replace('\"{', \"{\").replace('}\"', \"}\")\n                    : pattern.replace(\"{'\", \"{\").replace(\"}'\", \"}\");\n                replacement = replacement\n                    .replace(\"&lt;\", \"<\")\n                    .replace(\"&gt;\", \">\")\n                    .replace(\"&amp;\", \"&\");\n                html = html.replace(pattern, replacement);\n            }\n            return html;\n        },\n\n\n        /**\n         * Parse style string to object\n         * @param {string} str\n         * @return {Object}\n         * @example\n         * var stl = ParserHtml.parseStyle('color:black; width:100px; test:value;');\n         * console.log(stl);\n         * // {color: 'black', width: '100px', test: 'value'}\n         */\n        parseStyle(str) {\n            var result = {};\n            var decls = str.split(';');\n            for (var i = 0, len = decls.length; i < len; i++) {\n                var decl = decls[i].trim();\n                if (!decl) continue;\n                var prop = decl.split(':');\n                result[prop[0].trim()] = prop\n                    .slice(1)\n                    .join(':')\n                    .trim();\n            }\n            return result;\n        },\n\n        /**\n         * Parse class string to array\n         * @param {string} str\n         * @return {Array<string>}\n         * @example\n         * var res = ParserHtml.parseClass('test1 test2 test3');\n         * console.log(res);\n         * // ['test1', 'test2', 'test3']\n         */\n        parseClass(str) {\n            const result = [];\n            const cls = str.split(' ');\n            for (let i = 0, len = cls.length; i < len; i++) {\n                const cl = cls[i].trim();\n                if (!cl) continue;\n                result.push(cl);\n            }\n            return result;\n        },\n\n        toAttrArray(obj){\n            var attrArr = [];\n            Object.keys(obj).map(key => {\n                attrArr.push({'nodeName':key, 'nodeValue':obj[key]})\n            })\n            return attrArr;\n        },\n\n        /**\n         * Get data from the node element\n         * @param  {HTMLElement} el DOM element to traverse\n         * @return {Array<Object>}\n         */\n        parseNode(el) {\n            const result = [];\n            const nodes = el.childNodes;\n\n            for (var i = 0, len = nodes.length; i < len; i++) {\n                const node = nodes[i];\n\n                // DOM copmatibility\n                node.nodeValue = node.rawText;\n                node.content = node.rawText;\n\n                // Make attrs compatible with DOM representation\n                let attrs = [];\n                    attrs = (typeof node.attributes == 'object'\n                        ? this.toAttrArray(node.attributes)\n                        :  node.attributes)\n                        || []\n                    const attrsLen = attrs.length;\n                const nodePrev = result[result.length - 1];\n                const nodeChild = node.childNodes.length;\n                const ct = this.compTypes;\n                let model = {};\n\n                if (ct) {\n                    let obj = '';\n                    let type =\n                        node.getAttribute && node.getAttribute(`${modelAttrStart}type`);\n                    if (!type) {\n                        type = node.attributes && node.attributes[`${modelAttrStart}type`];\n                    }\n\n                    if (type) {\n                        model = { type };\n                    } else {\n                       \n                        for (let it = 0; it < ct.length; it++) {\n                            const compType = ct[it];\n                            obj = compType.model.isComponent(node);\n\n                            if (obj) {\n                                if (typeof obj !== 'object') {\n                                    obj = { type: compType.id };\n                                }\n                                break;\n                            }\n                        }\n\n                        model = obj;\n                    }\n                }\n\n                model.tagName = node.tagName;\n\n                if (attrsLen) {\n                    model.attributes = {};\n                }\n\n                for (let j = 0; j < attrsLen; j++) {\n                    const nodeName = attrs[j].nodeName;\n                    let nodeValue = attrs[j].nodeValue;\n                    // if (nodeName == \"formatValue\") {\n                    //     debugger;\n                    // }\n\n                    // Isolate attributes\n                    if (nodeName == 'style') {\n                        model.style = this.parseStyle(nodeValue);\n                    } else if (nodeName == 'class') {\n                        model.classes = this.parseClass(nodeValue);\n                    } else if (nodeName == 'contenteditable') {\n                        continue;\n                    } else if (nodeName.indexOf(modelAttrStart) === 0) {\n                        const modelAttr = nodeName.replace(modelAttrStart, '');\n                        const valueLen = nodeValue.length;\n                        const firstChar = nodeValue && nodeValue.substr(0, 1);\n                        const lastChar = nodeValue && nodeValue.substr(valueLen - 1);\n                        nodeValue = nodeValue === 'true' ? true : nodeValue;\n                        nodeValue = nodeValue === 'false' ? false : nodeValue;\n\n                      \n                        try {\n                            nodeValue =\n                                (firstChar == '{' && lastChar == '}') ||\n                                (firstChar == '[' && lastChar == ']')\n                                    ? JSON.parse(nodeValue)\n                                    : nodeValue;\n                        } catch (e) {}\n\n                        model[modelAttr] = nodeValue;\n                    } else {\n                        model.attributes[nodeName] = nodeValue;\n                    }\n                }\n\n                if (nodeChild && !model.components) {\n                    const firstChild = node.childNodes[0];\n                    firstChild.nodeValue = firstChild.rawText;\n\n                    if (nodeChild === 1 && firstChild.nodeType === 3) {\n                        !model.type && (model.type = 'text');\n                        model.content = firstChild.nodeValue;\n                    } else {\n                        model.components = this.parseNode(node);\n                    }\n                }\n\n                if (model.type == 'textnode') {\n                    model.content = node.nodeValue;\n\n                    if (nodePrev && nodePrev.type == 'textnode') {\n                        nodePrev.content += model.content;\n                        continue;\n                    }\n\n                    if (!config.keepEmptyTextNodes) {\n                        const content = node.nodeValue;\n                        if (content != ' ' && !content.trim()) {\n                            continue;\n                        }\n                    }\n                }\n\n                \n                const comps = model.components;\n                if (!model.type && comps) {\n                    let allTxt = 1;\n                    let foundTextNode = 0;\n\n                    for (let ci = 0; ci < comps.length; ci++) {\n                        const comp = comps[ci];\n                        const cType = comp.type;\n\n                        if (\n                            ['text', 'textnode'].indexOf(cType) < 0 &&\n                            c.textTags.indexOf(comp.tagName) < 0\n                        ) {\n                            allTxt = 0;\n                            break;\n                        }\n\n                        if (cType == 'textnode') {\n                            foundTextNode = 1;\n                        }\n                    }\n\n                    if (allTxt && foundTextNode) {\n                        model.type = 'text';\n                    }\n                }\n\n                if (!model.tagName && model.type != 'textnode') {\n                    continue;\n                }\n\n                result.push(model);\n            }\n\n            return result;\n        },\n\n        /**\n         * Parse HTML string to a desired model object\n         * @param  {string} str HTML string\n         * @param  {ParserCss} parserCss In case there is style tags inside HTML\n         * @return {Object}\n         *\n         */\n        parse(str, parserCss) {\n            console.log(\"html\", str, parserCss);\n\n            var config = (c.em && c.em.get('Config')) || {};\n            var res = { html: '', css: '' };\n\n            var quoted = this.quoteJsxExpresionsInAttributes(str);\n            let wrappedInDiv = false;\n            if (!quoted.startsWith('<')) {\n                quoted = '<div>'+quoted+'</div>';\n                wrappedInDiv = true;\n            }\n            const dom = nodeHtmlParser(quoted);\n            var result = this.parseNode(dom);\n\n            if (result.length == 1) {\n                result = result[0];\n            }\n\n            if (wrappedInDiv) {\n                if (result.components) {\n                    result = result.components;\n                }\n                \n                else {\n                    delete result.tagName;\n                    result.type = \"textnode\";\n                }\n            }\n            res.html = result;\n\n           \n            if (parserCss) {\n                var el = document.createElement('div');\n                el.innerHTML = str;\n                var styleStr = '';\n                var styles = el.querySelectorAll('style');\n                var j = styles.length;\n\n                while (j--) {\n                    styleStr = styles[j].innerHTML + styleStr;\n                    styles[j].parentNode.removeChild(styles[j]);\n                }\n\n                if (styleStr) res.css = parserCss.parse(styleStr);\n            }\n\n            return res;\n        }\n    };\n};","\nexport const ChartRef = 'Chart';\nexport const ChartPluginRef = 'Chart-Plugin';\nexport const loadHtmltemplate = 'load-html-template';\n","\nimport React from 'react';\n\nimport { VictoryChart, VictoryTheme, VictoryLine } from 'victory'\n\n\nconst Chart = () => {\n    return (\n        <div>\n            <VictoryChart\n                theme={VictoryTheme.material}\n            >\n                <VictoryLine\n                    interpolation=\"natural\"\n                    style={{\n                        data: { stroke: \"#c43a31\" },\n                        parent: { border: \"1px solid #ccc\" }\n                    }}\n                    data={[\n                        { x: 1, y: 2 },\n                        { x: 2, y: 3 },\n                        { x: 3, y: 5 },\n                        { x: 4, y: 4 },\n                        { x: 5, y: 7 }\n                    ]}\n                    labels={({ datum }) => `x: ${datum.x} | y: ${datum.y}`}\n                    animate={{\n                        duration: 2000,\n                        onLoad: { duration: 1000 }\n                    }}\n\n                />\n            </VictoryChart>\n        </div>\n    )\n}\n\nexport default Chart;","import axios from 'axios'\n\naxios.defaults.headers = {\n  Authorization: 'B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ'\n}\n\nconst APP_URL = 'http://173.249.14.149:3001/api'\n//http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb?access_Token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n//http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb/widgetSettings?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n\nexport const addWidget = async (widgetData, dashboardId = '5ef370de14213070188a41eb') => {\n  return axios\n    .post(\n      `${APP_URL}/Dashboards/${dashboardId}/widgetSettings`,\n      widgetData\n    )\n}\nexport const updatedash = async (dashboardId, widgetData) => {\n  return axios\n    .put(\n      `${APP_URL}/Dashboards/${dashboardId}`,\n      {grapes: widgetData}\n    )\n}\n\n//http://173.249.14.149:3001/api/widgetsettings/5ef7454a14213070188a46f9?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n\nexport const updateWidget = async (widgetId, widgetData) => {\n  return axios\n    .put(\n      `${APP_URL}/WidgetSettings/${widgetId}`,\n      widgetData\n    )\n}\n\nexport const getWidgets = async (dashboardId = '5ef370de14213070188a41eb') => {\n  return axios\n    .get(\n      `${APP_URL}/Dashboards/${dashboardId}/widgetSettings`\n    )\n}\n\nexport const getWidgetData = async (widgetId) => {\n  return axios.get(\n    `${APP_URL}/WidgetSettings/${widgetId}/execute-query`,\n  )\n}\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport axios from 'axios'\n\n\nimport {ChartRef} from './consts'\nimport Chart from './Chart'\nimport {\n\taddWidget,\n\tupdateWidget,\n\tgetWidgets,\n\tgetWidgetData\n} from './actions'\n\n\n\nexport default function (editor, opt = {}) {\n\n\tlet updateTrait = []\n\tconst domc = editor.DomComponents\n\tconst defaultType = domc.getType('default')\n\tconst defaultModel = defaultType.model\n\tconst defaultView = defaultType.view\n\n\n\n\tfunction displayOptions(displayDevice) {\n\t\tlet newObj = [];\n\n\t\tfor (var key in displayDevice) {\n\t\t\tif (displayDevice[key] === true)\n\t\t\t\tnewObj.push(key);\n\t\t}\n\n\t\treturn newObj;\n\t}\n\n\t\n\n\t\n\tdomc.addType(ChartRef, {\n\t\n\t\tmodel: defaultModel.extend({\n\t\t\tdefaults: {\n\t\t\t\t...defaultModel.prototype.defaults,\n\t\t\t\tdroppable: true,\n\t\t\t\tdefaultData: [[{ \"Name\": \"Henery\", \"Location\": \"Usa\", \"id\": \"5c24dc26dc10670017e40921\", \"last Seen\": \"2020-06-10T19:51:40.452Z\", \"notes\": \"\" }]],\n\t\t\t\tprevData: [],\n\t\t\t\tdbId:[],\n\t\t\t\ttraits:\n\t\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\tname:'modify',\n\t\t\t\ttype: 'button',\n\t\t\t\ttext: `Modify`,\n\t\t\t\tfull: true, \n\t\t\t\t\tcommand: editor => axios.get('http://173.249.14.149:3001/api/DataSources?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ')\n\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\tlet component = editor.getSelected()\n\t\t\t\t\t\t\tcomponent.addTrait({\n\t\t\t\t\t\t\t\tname: \"dataSource\",\n\t\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\t\tchangeProp: 1,\n\t\t\t\t\t\t\t\toptions: res.data.map(op => {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t{ id: op.id, name: op.title }\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tcomponent.removeTrait('modify')\n\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\ttoHTML: function () {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\n\t\t\t}, init() {\n\n\t\t\t\tthis.listenTo(this, this.handlePropChange);\n\t\t\t\tif (this.attributes.prevData.length >= 1) {\n\t\t\t\t\tthis.getTrait('modify').set('text', \"Edit\")\n\t\t\t\t\tthis.addTrait({\n\t\t\t\t\t\t \n\t\t\t\t\t\t\tname: 'Prev',\n\t\t\t\t\t\t\ttype: 'pre',\n\t\t\t\t\t\ttext: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].dataSourceId === '5ec035f7bb377b08ebc8938a' ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId}</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.docId}</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields.toString().replace(/,/g, ' | ')}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${this.attributes.prevData[0].config.primaryKey}</span><br/>\n\t\t\t\t\t`\n\t\t\t\t\t\n\t\t\t\t\t }, {at:0})\n\t\t\t\t}\n\t\t\t\tif (this.attributes.dataSource) {\n\t\t\t\t\tthis.attributes.dataSource = ''\n\t\t\t\t\tthis.attributes.Table = ''\n\t\t\t\t\tthis.attributes.collections = ''\n\t\t\t\t} else {\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\n\t\t}),\n\n\t\tview: defaultView.extend({\n\t\t\tinit() {\n\t\t\t\tthis.listenTo(this.model, `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`, this.handleChanges);\n\n\t\t\t},\n\t\t\thandleChanges() {\n\n\t\t\t\tif (this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\")) {\n\t\t\t\t\t\n\n\n\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/doc-list?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\n\t\t\t\t\t\t.then(response => {\n\n\t\t\t\t\t\t\tconst component = editor.getSelected();\n\t\t\t\t\t\t\tif (this.model.attributes.Table) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcomponent.addTrait\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\tname: \"Table\",\n\t\t\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\t\t\toptions:\n\t\t\t\t\t\t\t\t\t\tresponse.data.map((t) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t{ id: t, name: t }\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tchangeProp: 1,\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.attributes.Table) {\n\t\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/field-list?docId=${this.model.attributes.Table}&access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t.then(response => {\n\n\t\t\t\t\t\t\t\tconst component = editor.getSelected()\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\tif (updateTrait.length > 1) {\n\n\t\t\t\t\t\t\t\t\tthis.model.get('traits').each(function (trait) {\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(updateTrait.map(t => t.toString()));\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(\"collections\");\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(\"console\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresponse.data.map((t) => {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet res = [\n\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: t, name: t, type: \"checkbox\", changeProp:1\n\t\t\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\tupdateTrait.push(t)\n\t\t\t\t\t\t\t\t\tcomponent.addTrait(res)\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tcomponent.addTrait({\n\t\t\t\t\t\t\t\t\tlabel: \"Primary key\",\n\t\t\t\t\t\t\t\t\tname: \"collections\",\n\t\t\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\t\t\toptions: response.data.map(t => t),\n\t\t\t\t\t\t\t\t\tchangeProp: 1\n\n\t\t\t\t\t\t\t\t}, { at: 40 });\n\n\t\t\t\t\t\t\t\tcomponent.addTrait(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\t\t\t\tname: \"console\",\n\t\t\t\t\t\t\t\t\t\tchangeProp:1,\n\t\t\t\t\t\t\t\t\t\tlabel: \"log button\",\n\t\t\t\t\t\t\t\t\t\ttext: 'Click me',\n\t\t\t\t\t\t\t\t\t\tfull: true,\n\t\t\t\t\t\t\t\t\t\tcommand: editor => {\n\t\t\t\t\t\t\t\t\t\t\tconst selected = editor.getSelected();\n\t\t\t\t\t\t\t\t\t\t\tlet postData = {}\n\t\t\t\t\t\t\t\t\t\t\tlet postDataArray = []\n\t\t\t\t\t\t\t\t\t\t\tselected.attributes.traits.models.forEach(element => {\n\n\t\t\t\t\t\t\t\t\t\t\tpostData[element.attributes.name] = element.attributes.value\n\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\tpostDataArray.push(postData)\n\t\t\t\t\t\t\t\t\t\t\tlet arr = null\n\t\t\t\t\t\t\t\t\t\t\tarr = postDataArray.map((js => {\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"dataSourceId\": js.dataSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"config\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"fields\": displayOptions(js),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"primaryKey\": js.collections,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"docId\": js.Table,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"simple\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"func\": \"find\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": {}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"Chart\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}))[0]\n\t\t\t\t\t\t\t\t\t\t\t\taddWidget(arr)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(res.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet customId = res.data.id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.prevData = []\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.prevData.push(res.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.model.attributes.prevData.length >= 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait('Prev')\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/WidgetSettings/${customId}/execute-query?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.then(reso => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(reso.data)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.model.attributes.defaultData.length < 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData.push(reso.data)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData = []\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData.push(reso.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.then(() => {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReactDOM.unmountComponentAtNode(this.el);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.render();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t},\n\t\tonRender({ el }) {\n\t\t\t\t\t\t\t\t\n\t\t\t\tconst comps = this.model.get('components')\n\t\t\t\tcomps.reset()\n\t\t\t\tReactDOM.render(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Chart data={this.model.attributes.defaultData[0]} />\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t, el)\n\t\t\t},\n\t\t}),\n\t})\n\t\t\n}\n\n","\nimport {\n    ChartRef\n} from './consts';\n\nexport default function (editor, opt = {}) {\n\n    const c = opt;\n  const bm = editor.BlockManager;   \nbm.remove(ChartRef);\n    bm.add(ChartRef, {\n      label: 'Chart',\n      category: c.blockLabel,\n      attributes: { class: 'fa fa-line-chart' },\n      content: `\n        <div style=\"width: 30vw;\" data-gjs-type=\"${ChartRef}\"></div>\n      `\n    });\n  \n}\n","/**\n * Adds loadHtmltemplate command\n */\nimport axios from 'axios'\nimport {\n  addWidget,\n  updateWidget,\n  getWidgets,\n  getWidgetData\n} from './actions'\nimport {loadHtmltemplate} from \"./consts\";\n\nexport default (editor, config) => {\n  const cm = editor.Commands;\n\n  cm.add(loadHtmltemplate, e => {\n      const pHtml = e.getModel().get('Parser').parserHtml;\n      // JSX expression in attributes are quoted, so unquote them before passing on\n      let html = pHtml.unquoteJsxExpresionsInAttributes(e.getHtml());\n      config.setHtmlString(html);\n      config.setCssString(e.getCss());\n  });\n  cm.add\n    ('save-db',\n      {\n        run: function (editor, sender) {\n          sender && sender.set('active');\n          editor.store();\n        }\n      });\n \n  \n}\n","\n\nexport default (editor, config) => {\n    const pn = editor.Panels;\n    console.log(pn.getPanels())\n\n    \n}\n","import { each, isString } from 'underscore';\nimport { parse as nodeHtmlParser } from \"node-html-parser\";\nimport XRegExp from \"xregexp\";\n\nwindow.nodeHtmlParser = nodeHtmlParser;\n\n/**\n * Parses an HTML string into its HTML and CSS component representation keeping case of tags and attributes. This\n * is necessary in case you want React compatible JSX tags in the template, in which case the react components must start\n * wih uppercase and also the camel casing of attributes is importane (ie. className vs classname)\n *\n * This function is based on src/parser/model/ParserHtml.js. For parsing we are using node-html-parser instead of\n * the browser's DOM to keep the case of tags and attributes. The code is mostly the same  as in ParserHtml.js\n * by maing the objects created by  node-html-parser compatible with the DOM representation.\n *\n * @param config usual grapesjs config\n * @returns parser function\n */\nexport default config => {\n    var TEXT_NODE = 'span';\n    var c = config;\n    var modelAttrStart = 'data-gjs-';\n\n    return {\n        compTypes: '',\n\n        modelAttrStart,\n\n        /**\n         * Extract component props from an attribute object\n         * @param {Object} attr\n         * @returns {Object} An object containing props and attributes without them\n         */\n        splitPropsFromAttr(attr = {}) {\n            const props = {};\n            const attrs = {};\n\n            each(attr, (value, key) => {\n                if (key.indexOf(this.modelAttrStart) === 0) {\n                    const modelAttr = key.replace(modelAttrStart, '');\n                    const valueLen = value.length;\n                    const valStr = value && isString(value);\n                    const firstChar = valStr && value.substr(0, 1);\n                    const lastChar = valStr && value.substr(valueLen - 1);\n                    value = value === 'true' ? true : value;\n                    value = value === 'false' ? false : value;\n\n                    // Try to parse JSON where it's possible\n                    // I can get false positive here (eg. a selector '[data-attr]')\n                    // so put it under try/catch and let fail silently\n                    try {\n                        value =\n                            (firstChar == '{' && lastChar == '}') ||\n                            (firstChar == '[' && lastChar == ']')\n                                ? JSON.parse(value)\n                                : value;\n                    } catch (e) {}\n\n                    props[modelAttr] = value;\n                } else {\n                    attrs[key] = value;\n                }\n            });\n\n            return {\n                props,\n                attrs\n            };\n        },\n\n        /**\n         * Given a string with html (jsx). Attributes having JSX expressions will be quoted to look like\n         * actual HTML attributes\n         * @param {*} html\n         * @return html with quoted JSX attributes\n         *\n         * https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses\n         */\n        quoteJsxExpresionsInAttributes(html) {\n            let found = XRegExp.matchRecursive(html, \"{\", \"}\", \"g\");\n            for (let i = 0; i < found.length; i++) {\n                // (value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`\n                // --> {(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                let pattern = \"{\" + found[i] + \"}\";\n                let lastStartPos = 0;\n                // Find pattern until we reach and of html\n                while (true) {\n                    let needsQuote = false;\n                    // get next match position\n                    let matchPos = html.indexOf(pattern, lastStartPos);\n                    if (matchPos === -1) {\n                        break;\n                    }\n                    // We will look back 1 and 2 characters\n                    let oneCharBeforePos = matchPos - 1;\n                    let twoCharBeforePos = matchPos - 2;\n                    if (twoCharBeforePos > 0 && oneCharBeforePos > 0) {\n                        // Need to quote if have sg like this:\n                        //   formatValue={(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                        // (ie: if patterns comes atfre and equals sime, but not =\")\n                        // But no need to quote if:\n                        //    formatValue=\"{(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\"\n                        //    <Timer.Days/>{this.model.attributes.displayLabels ? \" \"+this.model.attributes.labels.labelDays+\" \" : ', '}\n                        needsQuote =\n                            html.substring(twoCharBeforePos, twoCharBeforePos + 2) !== '=\"' &&\n                            html.substring(oneCharBeforePos, oneCharBeforePos + 1) === \"=\";\n                    }\n\n                    // If need to quote: replace patterns with quoted version also escaping some HTML entities\n                    if (needsQuote) {\n                        let replacement =\n                            '\"{' +\n                            found[i]\n                                .replace(\"<\", \"&lt;\")\n                                .replace(\">\", \"&gt;\")\n                                .replace(\"&\", \"&amp;\")\n                            + '}\"';\n                        html = html.replace(pattern, replacement);\n                        lastStartPos = matchPos + replacement.length;\n                    } else {\n                        lastStartPos = matchPos + pattern.length;\n                    }\n\n                    // No lastStartPos placed after the processed string\n                }\n            }\n            return html;\n        },\n\n\n\n        /**\n         * Unquote attributes containg JSX previously quoted using quoteJsxExpresionsInAttributes\n         * @param html\n         */\n        unquoteJsxExpresionsInAttributes(html) {\n            let found = html.match(/=[\"']{.*}[\"']/g);\n            if (!found) {\n                return html;\n            }\n            for (let i = 0; i < found.length; i++) {\n                let pattern = found[i];\n                let replacement = pattern.startsWith('=\"{')\n                    ? pattern.replace('\"{', \"{\").replace('}\"', \"}\")\n                    : pattern.replace(\"{'\", \"{\").replace(\"}'\", \"}\");\n                replacement = replacement\n                    .replace(\"&lt;\", \"<\")\n                    .replace(\"&gt;\", \">\")\n                    .replace(\"&amp;\", \"&\");\n                html = html.replace(pattern, replacement);\n            }\n            return html;\n        },\n\n\n        /**\n         * Parse style string to object\n         * @param {string} str\n         * @return {Object}\n         * @example\n         * var stl = ParserHtml.parseStyle('color:black; width:100px; test:value;');\n         * console.log(stl);\n         * // {color: 'black', width: '100px', test: 'value'}\n         */\n        parseStyle(str) {\n            var result = {};\n            var decls = str.split(';');\n            for (var i = 0, len = decls.length; i < len; i++) {\n                var decl = decls[i].trim();\n                if (!decl) continue;\n                var prop = decl.split(':');\n                result[prop[0].trim()] = prop\n                    .slice(1)\n                    .join(':')\n                    .trim();\n            }\n            return result;\n        },\n\n        /**\n         * Parse class string to array\n         * @param {string} str\n         * @return {Array<string>}\n         * @example\n         * var res = ParserHtml.parseClass('test1 test2 test3');\n         * console.log(res);\n         * // ['test1', 'test2', 'test3']\n         */\n        parseClass(str) {\n            const result = [];\n            const cls = str.split(' ');\n            for (let i = 0, len = cls.length; i < len; i++) {\n                const cl = cls[i].trim();\n                if (!cl) continue;\n                result.push(cl);\n            }\n            return result;\n        },\n\n        toAttrArray(obj){\n            var attrArr = [];\n            Object.keys(obj).map(key => {\n                attrArr.push({'nodeName':key, 'nodeValue':obj[key]})\n            })\n            return attrArr;\n        },\n\n        /**\n         * Get data from the node element\n         * @param  {HTMLElement} el DOM element to traverse\n         * @return {Array<Object>}\n         */\n        parseNode(el) {\n            const result = [];\n            const nodes = el.childNodes;\n\n            for (var i = 0, len = nodes.length; i < len; i++) {\n                const node = nodes[i];\n\n                // DOM copmatibility\n                node.nodeValue = node.rawText;\n                node.content = node.rawText;\n\n                // Make attrs compatible with DOM representation\n                let attrs = [];\n                    attrs = (typeof node.attributes == 'object'\n                        ? this.toAttrArray(node.attributes)\n                        :  node.attributes)\n                        || []\n                    const attrsLen = attrs.length;\n                const nodePrev = result[result.length - 1];\n                const nodeChild = node.childNodes.length;\n                const ct = this.compTypes;\n                let model = {};\n\n                if (ct) {\n                    let obj = '';\n                    let type =\n                        node.getAttribute && node.getAttribute(`${modelAttrStart}type`);\n                    if (!type) {\n                        type = node.attributes && node.attributes[`${modelAttrStart}type`];\n                    }\n\n                    if (type) {\n                        model = { type };\n                    } else {\n                       \n                        for (let it = 0; it < ct.length; it++) {\n                            const compType = ct[it];\n                            obj = compType.model.isComponent(node);\n\n                            if (obj) {\n                                if (typeof obj !== 'object') {\n                                    obj = { type: compType.id };\n                                }\n                                break;\n                            }\n                        }\n\n                        model = obj;\n                    }\n                }\n\n                model.tagName = node.tagName;\n\n                if (attrsLen) {\n                    model.attributes = {};\n                }\n\n                for (let j = 0; j < attrsLen; j++) {\n                    const nodeName = attrs[j].nodeName;\n                    let nodeValue = attrs[j].nodeValue;\n                    // if (nodeName == \"formatValue\") {\n                    //     debugger;\n                    // }\n\n                    // Isolate attributes\n                    if (nodeName == 'style') {\n                        model.style = this.parseStyle(nodeValue);\n                    } else if (nodeName == 'class') {\n                        model.classes = this.parseClass(nodeValue);\n                    } else if (nodeName == 'contenteditable') {\n                        continue;\n                    } else if (nodeName.indexOf(modelAttrStart) === 0) {\n                        const modelAttr = nodeName.replace(modelAttrStart, '');\n                        const valueLen = nodeValue.length;\n                        const firstChar = nodeValue && nodeValue.substr(0, 1);\n                        const lastChar = nodeValue && nodeValue.substr(valueLen - 1);\n                        nodeValue = nodeValue === 'true' ? true : nodeValue;\n                        nodeValue = nodeValue === 'false' ? false : nodeValue;\n\n                      \n                        try {\n                            nodeValue =\n                                (firstChar == '{' && lastChar == '}') ||\n                                (firstChar == '[' && lastChar == ']')\n                                    ? JSON.parse(nodeValue)\n                                    : nodeValue;\n                        } catch (e) {}\n\n                        model[modelAttr] = nodeValue;\n                    } else {\n                        model.attributes[nodeName] = nodeValue;\n                    }\n                }\n\n                if (nodeChild && !model.components) {\n                    const firstChild = node.childNodes[0];\n                    firstChild.nodeValue = firstChild.rawText;\n\n                    if (nodeChild === 1 && firstChild.nodeType === 3) {\n                        !model.type && (model.type = 'text');\n                        model.content = firstChild.nodeValue;\n                    } else {\n                        model.components = this.parseNode(node);\n                    }\n                }\n\n                if (model.type == 'textnode') {\n                    model.content = node.nodeValue;\n\n                    if (nodePrev && nodePrev.type == 'textnode') {\n                        nodePrev.content += model.content;\n                        continue;\n                    }\n\n                    if (!config.keepEmptyTextNodes) {\n                        const content = node.nodeValue;\n                        if (content != ' ' && !content.trim()) {\n                            continue;\n                        }\n                    }\n                }\n\n                \n                const comps = model.components;\n                if (!model.type && comps) {\n                    let allTxt = 1;\n                    let foundTextNode = 0;\n\n                    for (let ci = 0; ci < comps.length; ci++) {\n                        const comp = comps[ci];\n                        const cType = comp.type;\n\n                        if (\n                            ['text', 'textnode'].indexOf(cType) < 0 &&\n                            c.textTags.indexOf(comp.tagName) < 0\n                        ) {\n                            allTxt = 0;\n                            break;\n                        }\n\n                        if (cType == 'textnode') {\n                            foundTextNode = 1;\n                        }\n                    }\n\n                    if (allTxt && foundTextNode) {\n                        model.type = 'text';\n                    }\n                }\n\n                if (!model.tagName && model.type != 'textnode') {\n                    continue;\n                }\n\n                result.push(model);\n            }\n\n            return result;\n        },\n\n        /**\n         * Parse HTML string to a desired model object\n         * @param  {string} str HTML string\n         * @param  {ParserCss} parserCss In case there is style tags inside HTML\n         * @return {Object}\n         *\n         */\n        parse(str, parserCss) {\n            console.log(\"html\", str, parserCss);\n\n            var config = (c.em && c.em.get('Config')) || {};\n            var res = { html: '', css: '' };\n\n            var quoted = this.quoteJsxExpresionsInAttributes(str);\n            let wrappedInDiv = false;\n            if (!quoted.startsWith('<')) {\n                quoted = '<div>'+quoted+'</div>';\n                wrappedInDiv = true;\n            }\n            const dom = nodeHtmlParser(quoted);\n            var result = this.parseNode(dom);\n\n            if (result.length == 1) {\n                result = result[0];\n            }\n\n            if (wrappedInDiv) {\n                if (result.components) {\n                    result = result.components;\n                }\n                \n                else {\n                    delete result.tagName;\n                    result.type = \"textnode\";\n                }\n            }\n            res.html = result;\n\n           \n            if (parserCss) {\n                var el = document.createElement('div');\n                el.innerHTML = str;\n                var styleStr = '';\n                var styles = el.querySelectorAll('style');\n                var j = styles.length;\n\n                while (j--) {\n                    styleStr = styles[j].innerHTML + styleStr;\n                    styles[j].parentNode.removeChild(styles[j]);\n                }\n\n                if (styleStr) res.css = parserCss.parse(styleStr);\n            }\n\n            return res;\n        }\n    };\n};","import React from \"react\";\n\nconst TestComponent = () => {\n  return (\n    <>\n      <div>TestComponent</div>\n      <div style={{ backgroundColor: \"red\" }}>ddd</div>\n    </>\n  );\n};\n\nexport default TestComponent;\n","import React, { useEffect, useState } from \"react\";\n//import 'grapesjs/dist/css/grapes.min.css';\nimport \"./css/grapes.min.css\";\nimport grapesjs from \"grapesjs\";\nimport gsWebpage from \"grapesjs-preset-webpage\";\nimport gsCustome from \"grapesjs-custom-code\";\nimport gsTap from \"grapesjs-tabs\";\n\nimport { TablePluginRef } from \"./Table/consts\";\nimport addTablePlugin from \"./Table\";\nimport { ChartPluginRef } from \"./Chart/consts\";\nimport addChartPlugin from \"./Chart\";\nimport TestComponent from \"./testcomponent\";\n\nconst App = () => {\n  const [pluginLoaded, setPluginLoaded] = useState(false);\n  const [editor, setEditor] = useState(null);\n\n  useEffect(() => {\n    if (!pluginLoaded) {\n      addTablePlugin();\n      addChartPlugin();\n      setPluginLoaded(true);\n    } else if (!editor) {\n      const e = grapesjs.init({\n        color: \"white\",\n        height: \"100vh\",\n        width: \"auto\",\n        container: \"#g\",\n        fromElement: true,\n        plugins: [gsWebpage, gsCustome, gsTap, TablePluginRef, ChartPluginRef],\n        storageManager: {\n          type: \"remote\",\n          urlStore:\n            \"http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb/grapes?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\",\n          urlLoad:\n            \"http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb/grapes?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\",\n          autosave: false,\n          autoload: true,\n          contentTypeJson: true,\n          storeComponents: true,\n          allowScripts: 1,\n          storeStyles: true,\n          storeHtml: true,\n          storeCss: true,\n        },\n      });\n    }\n  });\n\n  return (\n    <div id=\"g\" className=\"h\">\n      <TestComponent />\n    </div>\n  );\n};\n\nexport default App;\n","import grapesjs from 'grapesjs';\nimport loadComponents from './components'; \nimport loadBlocks from './blocks';\nimport loadCommands from './commands';\nimport loadPanels from './panels';\nimport parserHtmlCaseSensitive from './ParserHtmlCaseSensitive';\n\nimport {\n    TablePluginRef\n} from './consts';\n\nexport default function addTablePlugin() {\n    grapesjs.plugins.add(TablePluginRef, (editor, opts = {}) => {\n\n        \n        editor.TraitManager.addType('pre', {\n                                                                \n            noLabel: true,\n            \n            getInputEl() {\n                const { model} = this;\n                const {text} = model.props();\n                const label = text;\n                const input = `<div type=\"text\" style=\"font-size: 1rem; line-height:30px; margin:10px; word-wrap: break-word; width: 180px;\">${label}</div>`;\n                return input;\n            }\n        }\n                                                            \n\t\t) \n\n\n\n        let c = opts;\n \n        let defaults = {\n            blocks: [TablePluginRef],\n\n            blockLabel: 'Table',\n\n            blockCategory: 'Extra',\n\n            defaultStyle: true,\n\n        };\n        console.log(defaults)\n\n        for (let name in defaults) {\n            if (!(name in c))\n                c[name] = defaults[name];\n        }\n\n        loadComponents(editor, c);\n\n        loadBlocks(editor, c);\n\n        loadCommands(editor, c);\n\n        loadPanels(editor, c); \n\n        const em = editor.getModel();\n        const emConf = em.get('Config');\n        emConf.textTags = ['br', 'b', 'i', 'u', 'a', 'ul', 'ol'];\n        em.get('Parser').parserHtml = parserHtmlCaseSensitive(emConf);\n        em.get('Parser').parseHtml = (str) => {\n            const pHtml = em.get('Parser').parserHtml;\n            pHtml.compTypes = em.get('DomComponents').getTypes();\n            let res = pHtml.parse(str, em.get('Parser').parserCss);\n            return res;\n        };\n\n        editor.on(\"load\", () => {\n            const openBl = editor.Panels.getButton('views', 'open-blocks');\n            openBl && openBl.set('active', 1);\n        });\n\n    });\n}\n\n","import grapesjs from 'grapesjs';\nimport loadComponents from './components'; \nimport loadBlocks from './blocks';\nimport loadCommands from './commands';\nimport loadPanels from './panels';\nimport parserHtmlCaseSensitive from './ParserHtmlCaseSensitive';\n\nimport {\n    ChartPluginRef\n} from './consts';\n\nexport default function addChartPlugin() {\n    grapesjs.plugins.add(ChartPluginRef, (editor, opts = {}) => {\n\n        \n        editor.TraitManager.addType('pre', {\n                                                                \n            noLabel: true,\n            \n            getInputEl() {\n                const { model} = this;\n                const {text} = model.props();\n                const label = text;\n                const input = `<div type=\"text\" style=\"font-size: 1rem; line-height:30px; margin:10px; word-wrap: break-word; width: 180px;\">${label}</div>`;\n                return input;\n            }\n        }\n                                                            \n\t\t) \n\n\n\n        let c = opts;\n \n        let defaults = {\n            blocks: [ChartPluginRef],\n\n            blockLabel: 'Charts',\n\n            blockCategory: 'Extra',\n\n            defaultStyle: true,\n\n        };\n        console.log(defaults)\n\n        for (let name in defaults) {\n            if (!(name in c))\n                c[name] = defaults[name];\n        }\n\n        loadComponents(editor, c);\n\n        loadBlocks(editor, c);\n\n        loadCommands(editor, c);\n\n        loadPanels(editor, c); \n\n        const em = editor.getModel();\n        const emConf = em.get('Config');\n        emConf.textTags = ['br', 'b', 'i', 'u', 'a', 'ul', 'ol'];\n        em.get('Parser').parserHtml = parserHtmlCaseSensitive(emConf);\n        em.get('Parser').parseHtml = (str) => {\n            const pHtml = em.get('Parser').parserHtml;\n            pHtml.compTypes = em.get('DomComponents').getTypes();\n            let res = pHtml.parse(str, em.get('Parser').parserCss);\n            return res;\n        };\n\n        editor.on(\"load\", () => {\n            const openBl = editor.Panels.getButton('views', 'open-blocks');\n            openBl && openBl.set('active', 1);\n        });\n\n    });\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}